package BankServices.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

import trastienda.excepcion.DAOExcepcion;
import trastienda.modelo.Categoria;
import trastienda.modelo.Producto;
import trastienda.util.ConexionBD;

public class ProductoDAO extends BaseDAO {

	public Producto obtenerProductoPorId(int idProducto) throws DAOExcepcion {
		Producto vo = new Producto();
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			String query = "select * from producto where id_producto=?";
			con = ConexionBD.obtenerConexion();
			stmt = con.prepareStatement(query);
			stmt.setInt(1, idProducto);

			rs = stmt.executeQuery();
			if (rs.next()) {
				vo.setIdProducto(rs.getInt(1));
				Categoria categoria = new Categoria();
				categoria.setIdCategoria(rs.getInt(2));
				vo.setCategoria(categoria);
				vo.setNombre(rs.getString(3));
				vo.setDescripcion(rs.getString(4));
				vo.setPrecio(rs.getFloat(5));
				vo.setStock(rs.getInt(6));
				vo.setImportancia(rs.getInt(7));
				vo.setImagen(rs.getString(8));
			}
		} catch (SQLException e) {
			System.err.println(e.getMessage());
			throw new DAOExcepcion(e.getMessage());
		} finally {
			this.cerrarResultSet(rs);
			this.cerrarStatement(stmt);
			this.cerrarConexion(con);
		}
		return vo;
	}

	public Collection<Producto> buscarPorNombre(String nombre)
			throws DAOExcepcion {
		String query = "select producto.*, categoria.nombre as ncategoria from producto,categoria where producto.nombre like ? and categoria.id_categoria=producto.id_categoria";
		Collection<Producto> c = new ArrayList<Producto>();
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = ConexionBD.obtenerConexion();
			stmt = con.prepareStatement(query);
			stmt.setString(1, "%" + nombre + "%");
			rs = stmt.executeQuery();
			while (rs.next()) {
				Producto vo = new Producto();
				vo.setIdProducto(rs.getInt("id_producto"));				
				vo.setNombre(rs.getString("nombre"));
				System.out.println("----------->" + vo.getNombre());
				vo.setDescripcion(rs.getString("descripcion"));
				vo.setPrecio(rs.getFloat("precio"));
				vo.setStock(rs.getInt("stock"));
				vo.setImportancia(rs.getInt("importancia"));
				vo.setImagen(rs.getString("imagen"));

				Categoria categoria = new Categoria();
				categoria.setIdCategoria(rs.getInt("id_categoria"));
				categoria.setNombre(rs.getString("ncategoria"));
				vo.setCategoria(categoria);
				c.add(vo);
			}
		} catch (SQLException e) {
			System.err.println(e.getMessage());
			throw new DAOExcepcion(e.getMessage());
		} finally {
			this.cerrarResultSet(rs);
			this.cerrarStatement(stmt);
			this.cerrarConexion(con);
		}
		return c;
	}

	public Producto insertar(Producto vo) throws DAOExcepcion {
		String query = "INSERT INTO producto(id_categoria,nombre,descripcion,precio,stock,importancia,imagen) VALUES (?,?,?,?,?,?,?)";
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = ConexionBD.obtenerConexion();
			stmt = con.prepareStatement(query);
			stmt.setInt(1, vo.getCategoria().getIdCategoria());
			stmt.setString(2, vo.getNombre());
			stmt.setString(3, vo.getDescripcion());
			stmt.setDouble(4, vo.getPrecio());
			stmt.setInt(5, vo.getStock());
			stmt.setInt(6, vo.getImportancia());
			stmt.setString(7, vo.getImagen());
			int i = stmt.executeUpdate();
			if (i != 1) {
				throw new SQLException("No se pudo insertar");
			}
			// Obtener el ultimo id
			int id = 0;
			query = "SELECT LAST_INSERT_ID()";
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			vo.setIdProducto(id);
		} catch (SQLException e) {
			System.err.println(e.getMessage());
			throw new DAOExcepcion(e.getMessage());
		} finally {
			this.cerrarResultSet(rs);
			this.cerrarStatement(stmt);
			this.cerrarConexion(con);
		}
		return vo;
	}

	public void eliminar(int idProducto) throws DAOExcepcion {
		String query = "DELETE FROM producto WHERE id_producto=?";
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = ConexionBD.obtenerConexion();
			stmt = con.prepareStatement(query);
			stmt.setInt(1, idProducto);
			int i = stmt.executeUpdate();
			if (i != 1) {
				throw new SQLException("No se pudo eliminar");
			}
		} catch (SQLException e) {
			System.err.println(e.getMessage());
			throw new DAOExcepcion(e.getMessage());
		} finally {
			this.cerrarStatement(stmt);
			this.cerrarConexion(con);
		}
	}

	public Producto actualizar(Producto vo) throws DAOExcepcion {
		String query = "update producto set nombre=?, precio=? where id_producto=?";
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = ConexionBD.obtenerConexion();
			stmt = con.prepareStatement(query);
			stmt.setString(1, vo.getNombre());
//			stmt.setString(2, vo.getDescripcion());
			stmt.setDouble(2, vo.getPrecio());
//			stmt.setInt(4, vo.getStock());
//			stmt.setInt(5, vo.getImportancia());
//			stmt.setString(6, vo.getImagen());
//			stmt.setInt(7, vo.getCategoria().getIdCategoria());
			stmt.setInt(3, vo.getIdProducto());
			int i = stmt.executeUpdate();
			if (i != 1) {
				throw new SQLException("No se pudo actualizar");
			}
		} catch (SQLException e) {
			System.err.println(e.getMessage());
			throw new DAOExcepcion(e.getMessage());
		} finally {
			this.cerrarStatement(stmt);
			this.cerrarConexion(con);
		}
		return vo;
	}
	
	public Collection<Producto> listarProductosImportantesSinStock()
			throws DAOExcepcion {
		String query = "select id_producto, nombre, descripcion, precio, stock, importancia from producto where importancia=1 and stock=0";
		Collection<Producto> c = new ArrayList<Producto>();
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = ConexionBD.obtenerConexion();
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			while (rs.next()) {
				Producto vo = new Producto();
				vo.setIdProducto(rs.getInt("id_producto"));				
				vo.setNombre(rs.getString("nombre"));
				vo.setDescripcion(rs.getString("descripcion"));
				vo.setPrecio(rs.getFloat("precio"));
				vo.setStock(rs.getInt("stock"));
				vo.setImportancia(rs.getInt("importancia"));
				c.add(vo);
			}
		} catch (SQLException e) {
			System.err.println(e.getMessage());
			throw new DAOExcepcion(e.getMessage());
		} finally {
			this.cerrarResultSet(rs);
			this.cerrarStatement(stmt);
			this.cerrarConexion(con);
		}
		return c;
	}

}
